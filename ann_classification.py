# -*- coding: utf-8 -*-
"""ANN_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TzwswdI7WRy-oBK5P2cYQUqnt4AA_8DM
"""

print('hi')

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

import pandas as pd
import io
data=pd.read_csv(io.StringIO(uploaded['BreastCancerDataset.csv'].decode('utf-8')))
data.head()

import seaborn as sns
ax=sns.countplot(data['diagnosis'],label='Count')
B,M=data['diagnosis'].value_counts()
print('Benign',B)
print('Malignanat',M)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Importing data
#del data['Unnamed: 32']

X=data.iloc[:,2:].values
y=data.iloc[:,1].values

#Encoding categorical data
from sklearn.preprocessing import LabelEncoder
labelEncoder_X_1=LabelEncoder()
y=labelEncoder_X_1.fit_transform(y)

#Splitting the dataset into the Training and Test set
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=0)

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

X_train

X_test

!pip install keras

import keras
from keras.models import Sequential
from keras.layers import Dense

# adding the input and first hidden layer
classifier=Sequential()
classifier.add(Dense(units=16,activation='relu',input_dim=30))

# adding the second hidden layer
classifier.add(Dense(units=16,activation='relu'))

# adding the output layer
classifier.add(Dense(units=1,activation='sigmoid'))

classifier.compile(optimizer="Adam",loss='binary_crossentropy',metrics=['accuracy'])

classifier.fit(X_train,y_train,batch_size=100,epochs=150)

# Predicting the Test set results
y_pred=classifier.predict(X_test)
y_pred=(y_pred>0.5)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)

sns.heatmap(cm,annot=True)
plt.savefig('h.png')